name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: desci
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/desci?sslmode=disable
      GO111MODULE: on

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for postgres..."
          sleep 2
        done

    - name: Run database migrations
      run: |
        # 使用Go程序执行迁移，或者使用psql直接执行
        for file in migrations/*.sql; do
          echo "Executing $file..."
          PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d desci -f "$file"
        done

    - name: Run tests with coverage
      run: |
        go test ./... -race -coverprofile=coverage.out -covermode=atomic -v

    - name: Check coverage threshold
      run: |
        coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Test coverage: ${coverage}%"
        if (( $(echo "$coverage < 80" | bc -l) )); then
          echo "❌ Coverage ${coverage}% is below required 80%"
          exit 1
        else
          echo "✅ Coverage ${coverage}% meets requirement (≥80%)"
        fi

    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage to Codecov (optional)
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Run linter
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: desci_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/desci_test?sslmode=disable

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Install dependencies
      run: go mod download

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for postgres..."
          sleep 2
        done

    - name: Run database migrations
      run: |
        for file in migrations/*.sql; do
          echo "Executing $file..."
          PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d desci_test -f "$file"
        done

    - name: Run integration tests
      run: go test ./tests/ -v -tags=integration 